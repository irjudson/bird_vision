[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "bird-vision"
version = "0.1.0"
description = "Multi-modal bird identification with computer vision and audio analysis"
authors = [{name = "Your Name", email = "your.email@example.com"}]
license = {text = "MIT"}
readme = "README.md"
requires-python = ">=3.10"
dependencies = [
    # Deep Learning Framework - Latest PyTorch with Python 3.13 support
    "torch>=2.7.1",
    "torchvision>=0.20.1", 
    "torchaudio>=2.7.1",
    
    # Computer Vision & ML Libraries
    "timm>=1.0.12",
    "albumentations>=1.4.23",
    "opencv-python>=4.12.0",
    "pillow>=11.1.0",
    
    # Data Science Stack - Latest with Python 3.13 support
    "numpy>=2.2.1",
    "pandas>=2.3.0",
    "scikit-learn>=1.7.0",
    "matplotlib>=3.10.0",
    "seaborn>=0.13.2",
    
    # Configuration & Experiment Tracking
    "hydra-core>=1.3.2",
    "omegaconf>=2.3.0", 
    "mlflow>=2.21.0",
    "wandb>=0.21.0",
    "tensorboard>=2.19.0",
    
    # Data Management
    "deeplake>=3.9.30",
    
    # CLI & UI - Latest versions
    "typer>=0.16.0",
    "rich>=14.0.0",
    "loguru>=0.7.3",
    
    # Validation & Settings - Latest Pydantic
    "pydantic>=2.10.2",
    "pydantic-settings>=2.7.0",
    
    # Model Export & Optimization - Latest stable versions
    "onnx>=1.18.0",
    "onnxruntime>=1.21.0",
    "openvino>=2024.6.0",
    "coremltools>=8.2.0",
    
    # TensorFlow - Note: No Python 3.13 support yet, stick with 3.12 compatibility
    "tensorflow>=2.18.0; python_version<'3.13'",
    
    # Mobile deployment - ONNX Runtime (Python 3.13 compatible alternative to LiteRT)
    # Note: ai-edge-litert doesn't support Python 3.13 yet
    
    # System Monitoring
    "psutil>=6.1.0",
]

[project.optional-dependencies]
dev = [
    # Testing Framework - Latest stable versions
    "pytest>=8.4.0",
    "pytest-cov>=6.0.0",
    
    # Code Quality & Formatting - Latest tools
    "black>=24.12.0",
    "ruff>=0.10.0",
    "isort>=5.13.0",
    "mypy>=1.14.0",
    "pre-commit>=4.0.0",
    
    # Development Environment
    "jupyter>=1.1.0",
    "ipykernel>=6.30.0a0",
]
mobile = [
    "torch-mobile>=0.1.0",
    "torchscript>=1.0.0",
]
audio = [
    # Audio Processing - Latest stable versions
    "librosa>=0.10.5",
    "soundfile>=0.12.2",
    "audioread>=3.0.2",
]
esp32 = [
    # ESP32 Development - Latest tools
    "thop>=0.1.2",  # For FLOPS calculation
    "platformio>=6.3.0",  # For ESP32 development
    "torchsummary>=1.5.1",  # Model analysis
]
raspberry_pi = [
    # Raspberry Pi camera and hardware dependencies - Latest versions
    "picamera2>=0.3.25; platform_machine=='armv7l' or platform_machine=='aarch64'",
    "libcamera>=0.4.0; platform_machine=='armv7l' or platform_machine=='aarch64'",
    "rpi-gpio>=0.7.1; platform_machine=='armv7l' or platform_machine=='aarch64'",
    "pigpio>=1.78; platform_machine=='armv7l' or platform_machine=='aarch64'",
    # ARM-optimized ML libraries
    "onnxruntime>=1.21.0",
    "numpy>=2.2.1",
    # Raspberry Pi OS utilities
    "psutil>=6.1.0",
    "GPUtil>=1.4.0",
]
tflite = [
    # TensorFlow Lite / LiteRT alternative for mobile deployment
    # Note: ai-edge-litert and ai-edge-torch don't support Python 3.13 yet
    # Use ONNX Runtime as alternative for mobile deployment
    "onnxruntime>=1.21.0",  # Python 3.13 compatible mobile deployment
    # Uncomment when Python 3.13 support is available:
    # "ai-edge-litert>=1.1.0",
    # "ai-edge-torch>=0.2.0",
]

[project.scripts]
bird-vision = "bird_vision.cli:main"

[tool.setuptools.packages.find]
where = ["src"]

[tool.black]
line-length = 88
target-version = ['py310', 'py311', 'py312', 'py313']
include = '\.pyi?$'

[tool.ruff]
line-length = 88
target-version = "py310"
select = ["E", "F", "W", "C", "I", "N", "UP"]
ignore = ["E501", "W503"]

[tool.ruff.isort]
profile = "black"

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88

[tool.mypy]
python_version = "3.10"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
ignore_missing_imports = true

[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --cov=bird_vision --cov-report=term-missing"
testpaths = ["tests"]
